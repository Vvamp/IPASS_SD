{"version":3,"file":"main-Bjz0Fh-U.js","sources":["../../../../frontend/src/map.js"],"sourcesContent":["// Coordinates for Utrecht (Longitude, Latitude)\nvar defaultCenterCoords = [5.496378, 51.979966];\n\n// Convert from normal coordinates to OpenLayers' projection\nvar centerOLCoords = ol.proj.fromLonLat(defaultCenterCoords);\n\n// Create a feature for the ship\nvar shipFeature = new ol.Feature({\n  geometry: new ol.geom.Point(0, 0),\n});\n\n// Create a style for the ship feature\nshipFeature.setStyle(\n  new ol.style.Style({\n    image: new ol.style.Icon({\n      src: \"/ship.png\", // URL of the ship icon\n      scale: 0.12, // Adjust the scale of the icon as needed\n      anchor: [0.5, 0.5], // Center the anchor point\n      anchorXUnits: \"fraction\",\n      anchorYUnits: \"fraction\",\n    }),\n  })\n);\n\n// Create a vector source and add the ship feature to it\nvar vectorSource = new ol.source.Vector({\n  features: [shipFeature],\n});\n\n// Create a vector layer with the vector source\nvar vectorLayer = new ol.layer.Vector({\n  source: vectorSource,\n});\n\n// Create a map\nvar map = new ol.Map({\n  target: \"map\", // The ID of the div element\n  layers: [\n    new ol.layer.Tile({\n      source: new ol.source.OSM(), // OpenStreetMap as the source\n    }),\n    vectorLayer,\n  ],\n  view: new ol.View({\n    center: centerOLCoords,\n    zoom: 18, // Adjust zoom level as needed\n  }),\n});\n\nfunction updateShipLocation(location) {\n  try {\n    var newShipCoords = ol.proj.fromLonLat([location[1], location[0]]);\n    shipFeature.getGeometry().setCoordinates(newShipCoords);\n  } catch (err) {\n    console.warn(\"No ship data (yet) available\");\n  }\n  // Optionally, update the map view to center on the new ship location\n  // map.getView().setCenter(newShipCoords);\n}\n\nfunction resetLocation() {\n  updateShipLocation([51.98056333333333, 5.4971966666666665]);\n  console.log(\"set starting location\");\n}\n\nfunction loadShipLocation() {\n  let url = \"/api/ais\";\n  fetch(url)\n    .then((res) => res.json())\n    .then((out) =>\n      updateShipLocation([\n        out.Message.PositionReport.Latitude,\n        out.Message.PositionReport.Longitude,\n      ])\n    )\n    .catch((err) => {\n      //   throw err;\n      console.log(\"Failed to update ship location: \" + err);\n    });\n}\n\nwindow.onload = function () {\n  resetLocation();\n  setInterval(loadShipLocation, 5000);\n};\n"],"names":["defaultCenterCoords","centerOLCoords","shipFeature","vectorSource","vectorLayer","updateShipLocation","location","newShipCoords","resetLocation","loadShipLocation","res","out","err"],"mappings":"ssBACA,IAAIA,EAAsB,CAAC,SAAU,SAAS,EAG1CC,EAAiB,GAAG,KAAK,WAAWD,CAAmB,EAGvDE,EAAc,IAAI,GAAG,QAAQ,CAC/B,SAAU,IAAI,GAAG,KAAK,MAAM,EAAG,CAAC,CAClC,CAAC,EAGDA,EAAY,SACV,IAAI,GAAG,MAAM,MAAM,CACjB,MAAO,IAAI,GAAG,MAAM,KAAK,CACvB,IAAK,YACL,MAAO,IACP,OAAQ,CAAC,GAAK,EAAG,EACjB,aAAc,WACd,aAAc,UACpB,CAAK,CACL,CAAG,CACH,EAGA,IAAIC,EAAe,IAAI,GAAG,OAAO,OAAO,CACtC,SAAU,CAACD,CAAW,CACxB,CAAC,EAGGE,EAAc,IAAI,GAAG,MAAM,OAAO,CACpC,OAAQD,CACV,CAAC,EAGS,IAAI,GAAG,IAAI,CACnB,OAAQ,MACR,OAAQ,CACN,IAAI,GAAG,MAAM,KAAK,CAChB,OAAQ,IAAI,GAAG,OAAO,GAC5B,CAAK,EACDC,CACD,EACD,KAAM,IAAI,GAAG,KAAK,CAChB,OAAQH,EACR,KAAM,EACV,CAAG,CACH,CAAC,EAED,SAASI,EAAmBC,EAAU,CACpC,GAAI,CACF,IAAIC,EAAgB,GAAG,KAAK,WAAW,CAACD,EAAS,CAAC,EAAGA,EAAS,CAAC,CAAC,CAAC,EACjEJ,EAAY,YAAW,EAAG,eAAeK,CAAa,CACvD,MAAa,CACZ,QAAQ,KAAK,8BAA8B,CAC5C,CAGH,CAEA,SAASC,GAAgB,CACvBH,EAAmB,CAAC,kBAAmB,kBAAkB,CAAC,EAC1D,QAAQ,IAAI,uBAAuB,CACrC,CAEA,SAASI,GAAmB,CAE1B,MADU,UACD,EACN,KAAMC,GAAQA,EAAI,KAAI,CAAE,EACxB,KAAMC,GACLN,EAAmB,CACjBM,EAAI,QAAQ,eAAe,SAC3BA,EAAI,QAAQ,eAAe,SACnC,CAAO,CACF,EACA,MAAOC,GAAQ,CAEd,QAAQ,IAAI,mCAAqCA,CAAG,CAC1D,CAAK,CACL,CAEA,OAAO,OAAS,UAAY,CAC1BJ,IACA,YAAYC,EAAkB,GAAI,CACpC"}